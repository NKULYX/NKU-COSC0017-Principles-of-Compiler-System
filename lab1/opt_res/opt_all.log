*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 5, align 4
@m = dso_local constant i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"DEF TEST!\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 5, align 4
@m = dso_local constant i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"DEF TEST!\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

; Loop:
8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

; Exit blocks
19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
*** IR Dump After Loop Strength Reduction ***
; Preheader:
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

; Loop:
8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

; Exit blocks
19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 5, align 4
@m = dso_local constant i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"DEF TEST!\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 5, align 4
@m = dso_local constant i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"DEF TEST!\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rank(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  store i32 %7, i32* %6, align 4
  br label %8

8:                                                ; preds = %16, %2
  %9 = load i32, i32* %6, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sle i32 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %5, align 4
  %15 = mul nsw i32 %14, %13
  store i32 %15, i32* %5, align 4
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %6, align 4
  br label %8

19:                                               ; preds = %8
  %20 = load i32, i32* %5, align 4
  ret i32 %20
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function rank: IsSSA, TracksLiveness

# End machine code for function rank.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.3
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)

bb.3 (%ir-block.16):
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Slot index numbering ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.4, 15, implicit $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
240B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
256B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
272B	  JMP_1 %bb.1

288B	bb.4 (%ir-block.19):
	; predecessors: %bb.1

304B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
320B	  $eax = COPY %4:gr32
336B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.4, 15, implicit $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
240B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
256B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
272B	  JMP_1 %bb.1

288B	bb.4 (%ir-block.19):
	; predecessors: %bb.1

304B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
320B	  $eax = COPY %4:gr32
336B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine code sinking ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  %3:gr32 = SUB32rm %2:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.4(0x04000000); %bb.2(96.88%), %bb.4(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.4, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY %4:gr32
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm killed %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function rank: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm killed %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm killed %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = nsw IMUL32rm killed %5:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = COPY killed %5:gr32
  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  %1:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %6:gr32 = COPY killed %5:gr32
  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  $eax = COPY killed %4:gr32
  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Slot index numbering ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = COPY killed %5:gr32
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY killed %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = COPY killed %5:gr32
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY killed %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = COPY %5:gr32
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
224B	  %6:gr32 = COPY %5:gr32
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, killed $eax

# End machine code for function rank.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
16B	  %1:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %2:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm %2:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  %6:gr32 = nsw IMUL32rm %6:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
336B	  $eax = COPY %4:gr32
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
64B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
96B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

112B	bb.1 (%ir-block.8):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
144B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
160B	  JCC_1 %bb.3, 15, implicit killed $eflags
176B	  JMP_1 %bb.2

192B	bb.2 (%ir-block.12):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
240B	  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
272B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

320B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
352B	  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Tail Duplication ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function rank.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $edi :: (store 4 into %ir.6)

bb.1 (%ir-block.8, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.4)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.12):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $eax = nsw IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.6), (dereferenceable load 4 from %ir.6)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.5)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function rank.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @rank(i32 4, i32 5)
  %6 = call i32 @rank(i32 1, i32 2)
  %7 = sdiv i32 %5, %6
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %8)
  store i32 1, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY %0:gr64
128B	  $rsi = COPY %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %4:gr32 = COPY $eax
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %5:gr32 = MOV32ri 4
240B	  %6:gr32 = MOV32ri 5
256B	  $edi = COPY %5:gr32
272B	  $esi = COPY %6:gr32
288B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY $eax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  %8:gr32 = MOV32ri 1
368B	  %9:gr32 = MOV32ri 2
384B	  $edi = COPY %8:gr32
400B	  $esi = COPY %9:gr32
416B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
448B	  %10:gr32 = COPY $eax
464B	  $eax = COPY %7:gr32
480B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
496B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
512B	  %11:gr32 = COPY $eax
528B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  %12:gr64 = MOV32ri64 @.str.2
576B	  $rdi = COPY %12:gr64
592B	  $esi = COPY %11:gr32
608B	  $al = COPY %3:gr8
624B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  %13:gr32 = COPY $eax
672B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
704B	  %14:gr32 = MOV32ri 9
720B	  $rdi = COPY %12:gr64
736B	  $esi = COPY %14:gr32
752B	  $al = COPY %3:gr8
768B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %15:gr32 = COPY $eax
816B	  $eax = COPY %2:gr32
832B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY %0:gr64
128B	  $rsi = COPY %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %4:gr32 = COPY $eax
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %5:gr32 = MOV32ri 4
240B	  %6:gr32 = MOV32ri 5
256B	  $edi = COPY %5:gr32
272B	  $esi = COPY %6:gr32
288B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %7:gr32 = COPY $eax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  %8:gr32 = MOV32ri 1
368B	  %9:gr32 = MOV32ri 2
384B	  $edi = COPY %8:gr32
400B	  $esi = COPY %9:gr32
416B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
448B	  %10:gr32 = COPY $eax
464B	  $eax = COPY %7:gr32
480B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
496B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
512B	  %11:gr32 = COPY $eax
528B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  %12:gr64 = MOV32ri64 @.str.2
576B	  $rdi = COPY %12:gr64
592B	  $esi = COPY %11:gr32
608B	  $al = COPY %3:gr8
624B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  %13:gr32 = COPY $eax
672B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
704B	  %14:gr32 = MOV32ri 9
720B	  $rdi = COPY %12:gr64
736B	  $esi = COPY %14:gr32
752B	  $al = COPY %3:gr8
768B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %15:gr32 = COPY $eax
816B	  $eax = COPY %2:gr32
832B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY %5:gr32
  $esi = COPY %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY %8:gr32
  $esi = COPY %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  $eax = COPY %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
  %11:gr32 = COPY $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY %12:gr64
  $esi = COPY %14:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV32ri64 @.str
  %1:gr64 = MOV32ri64 @.str.1
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = MOV32ri 4
  %6:gr32 = MOV32ri 5
  $edi = COPY killed %5:gr32
  $esi = COPY killed %6:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %8:gr32 = MOV32ri 1
  %9:gr32 = MOV32ri 2
  $edi = COPY killed %8:gr32
  $esi = COPY killed %9:gr32
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY killed $eax
  $eax = COPY killed %7:gr32
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
  %11:gr32 = COPY killed $eax
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = MOV32ri64 @.str.2
  $rdi = COPY %12:gr64
  $esi = COPY killed %11:gr32
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32ri 9
  $rdi = COPY killed %12:gr64
  $esi = COPY killed %14:gr32
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY killed %0:gr64
128B	  $rsi = COPY killed %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %5:gr32 = MOV32ri 4
224B	  %6:gr32 = MOV32ri 5
240B	  $edi = COPY killed %5:gr32
256B	  $esi = COPY killed %6:gr32
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %8:gr32 = MOV32ri 1
352B	  %9:gr32 = MOV32ri 2
368B	  $edi = COPY killed %8:gr32
384B	  $esi = COPY killed %9:gr32
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY killed %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
544B	  %12:gr64 = MOV32ri64 @.str.2
560B	  $rdi = COPY %12:gr64
576B	  $esi = COPY killed %11:gr32
592B	  $al = COPY %3:gr8
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %14:gr32 = MOV32ri 9
688B	  $rdi = COPY killed %12:gr64
704B	  $esi = COPY killed %14:gr32
720B	  $al = COPY killed %3:gr8
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = COPY killed %2:gr32
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY killed %0:gr64
128B	  $rsi = COPY killed %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %5:gr32 = MOV32ri 4
224B	  %6:gr32 = MOV32ri 5
240B	  $edi = COPY killed %5:gr32
256B	  $esi = COPY killed %6:gr32
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %8:gr32 = MOV32ri 1
352B	  %9:gr32 = MOV32ri 2
368B	  $edi = COPY killed %8:gr32
384B	  $esi = COPY killed %9:gr32
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY killed %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r killed %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
544B	  %12:gr64 = MOV32ri64 @.str.2
560B	  $rdi = COPY %12:gr64
576B	  $esi = COPY killed %11:gr32
592B	  $al = COPY %3:gr8
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %14:gr32 = MOV32ri 9
688B	  $rdi = COPY killed %12:gr64
704B	  $esi = COPY killed %14:gr32
720B	  $al = COPY killed %3:gr8
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = COPY killed %2:gr32
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY %0:gr64
128B	  $rsi = COPY %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %5:gr32 = MOV32ri 4
224B	  %6:gr32 = MOV32ri 5
240B	  $edi = COPY %5:gr32
256B	  $esi = COPY %6:gr32
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %8:gr32 = MOV32ri 1
352B	  %9:gr32 = MOV32ri 2
368B	  $edi = COPY %8:gr32
384B	  $esi = COPY %9:gr32
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
544B	  %12:gr64 = MOV32ri64 @.str.2
560B	  $rdi = COPY %12:gr64
576B	  $esi = COPY %11:gr32
592B	  $al = COPY %3:gr8
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %14:gr32 = MOV32ri 9
688B	  $rdi = COPY %12:gr64
704B	  $esi = COPY %14:gr32
720B	  $al = COPY %3:gr8
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = COPY %2:gr32
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %0:gr64 = MOV32ri64 @.str
64B	  %1:gr64 = MOV32ri64 @.str.1
80B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
96B	  %3:gr8 = COPY %2.sub_8bit:gr32
112B	  $rdi = COPY %0:gr64
128B	  $rsi = COPY %1:gr64
144B	  $al = COPY %3:gr8
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %5:gr32 = MOV32ri 4
224B	  %6:gr32 = MOV32ri 5
240B	  $edi = COPY %5:gr32
256B	  $esi = COPY %6:gr32
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %8:gr32 = MOV32ri 1
352B	  %9:gr32 = MOV32ri 2
368B	  $edi = COPY %8:gr32
384B	  $esi = COPY %9:gr32
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
544B	  %12:gr64 = MOV32ri64 @.str.2
560B	  $rdi = COPY %12:gr64
576B	  $esi = COPY %11:gr32
592B	  $al = COPY %3:gr8
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %14:gr32 = MOV32ri 9
688B	  $rdi = COPY %12:gr64
704B	  $esi = COPY %14:gr32
720B	  $al = COPY %3:gr8
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = COPY %2:gr32
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY killed $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY killed $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
496B	  %11:gr32 = COPY killed $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %7:gr32 = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr32 = COPY $eax
448B	  $eax = COPY %7:gr32
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r %10:gr32, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
488B	  %11:gr32 = COPY $eax
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY %11:gr32
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebx = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  renamable $ecx = COPY $eax
448B	  $eax = COPY killed renamable $ebx
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY killed renamable $eax
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebx = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  renamable $ecx = COPY $eax
448B	  $eax = COPY killed renamable $ebx
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY killed renamable $eax
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebx = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  renamable $ecx = COPY $eax
448B	  $eax = COPY killed renamable $ebx
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY killed renamable $eax
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  $rdi = MOV32ri64 @.str
128B	  $rsi = MOV32ri64 @.str.1
144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
240B	  $edi = MOV32ri 4
256B	  $esi = MOV32ri 5
272B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebx = COPY $eax
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  $edi = MOV32ri 1
384B	  $esi = MOV32ri 2
400B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  renamable $ecx = COPY $eax
448B	  $eax = COPY killed renamable $ebx
464B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
480B	  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
512B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  $rdi = MOV32ri64 @.str.2
576B	  $esi = COPY killed renamable $eax
592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = MOV32ri64 @.str.2
704B	  $esi = MOV32ri 9
720B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  $eax = MOV32r0 implicit-def dead $eflags
784B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebx = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ebx = COPY $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  renamable $ecx = COPY $eax
  $eax = COPY killed renamable $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $rdi = MOV32ri64 @.str.2
  $esi = COPY killed renamable $eax
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $rdi = MOV32ri64 @.str.2
  $esi = MOV32ri 9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]

bb.0 (%ir-block.0):
  liveins: $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -24
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri @.str.1, implicit-def $rsi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri 4
  $esi = MOV32ri 5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ebx = MOV32rr $eax
  $edi = MOV32ri 1
  $esi = MOV32ri 2
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  $ecx = MOV32rr $eax
  $eax = MOV32rr killed $ebx
  CDQ implicit-def $eax, implicit-def $edx, implicit $eax
  IDIV32r killed renamable $ecx, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit killed $edx
  MOV32mr $rbp, 1, $noreg, -16, $noreg, renamable $eax :: (store 4 into %ir.2)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32rr killed $eax
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 9 :: (store 4 into %ir.3)
  $edi = MOV32ri @.str.2, implicit-def $rdi
  $esi = MOV32ri 9
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 24, implicit-def dead $eflags
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

